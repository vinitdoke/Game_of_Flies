import os

import cv2
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm

"""
stitches images generated by matplotlib from numpy arrays into a video
"""


def generateVideofromImages(images, dir_path, outvid=None,
                            fps=24, size=None,
                            is_color=True, format="XVID"):
    """
    Generate video from list of images.
    @param images: list of image name with extension.
    @param dir_path: path to image directory.
    @param outvid: output video name with extension.
    @param fps: frame per second.
    @param size: size of frame.
    @param is_color: color video.
    @param format: see http://www.fourcc.org/codecs.php
    @return: None
    """

    fourcc = cv2.VideoWriter_fourcc(*format)
    vid = None
    for image in tqdm(images):
        if not os.path.exists(os.path.join(dir_path, image)):
            raise FileNotFoundError(image)
        img = cv2.imread(os.path.join(dir_path, image))
        if vid is None:
            if size is None:
                size = img.shape[1], img.shape[0]
            vid = cv2.VideoWriter(outvid, fourcc, float(fps), size, is_color)
        if size[0] != img.shape[1] and size[1] != img.shape[0]:
            img = cv2.resize(img, size)
        vid.write(img)
    vid.release()
    return vid


def generate_scatter_plots(list_of_arrays, dir_path, limits=(0, 1)):
    """
    :param list_of_arrays:
    :param dir_path:
    :param limits: tuple of (min, max) values for x and y axes
    :return:
    """
    for i, array in tqdm(enumerate(list_of_arrays)):
        plt.scatter(array[:, 0], array[:, 1], s=1)
        plt.xlim(limits[0], limits[1])
        plt.ylim(limits[0], limits[1])
        plt.tick_params(left=False, right=False, labelleft=False,
                        labelbottom=False, bottom=False)
        plt.savefig(f'{dir_path}{i:03}.png', dpi=300)
        plt.clf()


def AllImagesFromDIrectory(dir_path):
    images = []
    for file in os.listdir(dir_path):
        if file.endswith(".png"):
            images.append(file)
    return images


def _create_sample_arrays(n):
    """
    :param n: number of arrays to create
    :return: list of arrays
    """
    return [np.random.uniform(0, 1, (10, 2)) for _ in range(n)]


if __name__ == "__main__":
    # print(_create_sample_arrays(10))
    generate_scatter_plots(_create_sample_arrays(100), 'output/images/')
    images = AllImagesFromDIrectory('output/images')
    generateVideofromImages(images, 'output/images', 'output/video.mp4')
